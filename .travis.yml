notifications:
  slack:
    secure: naix0bLa/50X1HIXwLtkUC/YH9Iurs18eVy/mhfrfD2YFd7QjUGRz24SQU2r0ev0Qh3CUaH9MJoAUbu4oaXGB1VXzZkV7OIGimZe4gcWJuzItnVhyrQJKpcpC7yafdl7uDA0wjWs2BYRHCJ3c35Gv4SmihuGVXUS3WFsL0i3VyXno8xPOfmyuUT7GZWW80uMnV6eOyhbPCBb17CchI8x7owdXVf3drxCrrjoP3oNbbpByTsDC+hnCmVQbhkZAqS63gZRj5LT6gNh4ZA/qenaGkhzfHFRSUW1+H16ZzYcSSl0PfAQBQYrc7agUjI987PBHdOv6BJS+pKmZ0MvaDwbnzhHZZdb8LXqM5K0zAhPiZMPL2MTq7+eNOBdRuTlbWs3OZfbY1cnewSpMmUGfwrIjVnLtvfhfJXVaFbpIfvNc6eafgmHas23A05f4Gk/IcRLvqICw+GQg76ADUpWubQal7gECTGbeivOdRLnQcQYWCg/a5VR5B+4ELENmWLRD7IQgo6rJKpPiRdGRc0C0E9Mqt3w7w+9NiDnjTbSu8Q6ARBLXjAu+jSbY1VK0iPq6k1Wj8U5EgQF/xVLCEtKDRW1bdllwWNgi2yPo1CrkgKmJj6XPU3Zc744NR85uC+PxAjkIIbm90joevPmUQGwkpAgVX2pxCjVAX6ynQ79TFfdd/Y=

#dist: trusty  # on 2016-12-13 pypy builds were broken on trusty, so we'll stick to stable for now
language: python

python:
  - 2.7
  - 3.5
  - 3.6
  - 3.7
  - 3.8
  # stock versions of pypy provided by Travis CI don't work with cryptography 1.0
  #- pypy
  #- pypy3

branches:
  # https://github.com/travis-ci/travis-ci/issues/1147#issuecomment-160820262
  # this reduces workload on Travis if there are many pushes in a short time.
  # It does not have a drawback if:
  # - pull requests are used for review
  # - branches that we care about (not work-in-progress) are listed below
  only:
    - master
    - /^v\d+\.\d+(\.\d+)?(-\S*)?$/  # tags in v1.2.3 format

matrix:
  allow_failures:
    - python: pypy3  # https://github.com/pyca/cryptography/issues/2880
    - python: nightly  # problem with compiling cffi with python 3.10
  include:
    # Source Code Analysis is slow.  We just run it once on
    # Python 2 and once on Python 3.
    - python: 2.7
      env: MODE=SCA
    - python: 3.8
      env: MODE=SCA

    # nightly
    - python: nightly

    # OS X
    - python: 3.8
      os: osx
      language: bash
      env:
        - TRAVIS_PYTHON_VERSION=3.8
      before_cache:
        - rm -f "$HOME/Library/Caches/pip/log/debug.log"
      # Homebrew bundle is deprecated, we use pyenv to install specific python version.
      # https://travis-ci.community/t/macos-build-fails-because-of-homebrew-bundle-unknown-command/7296/15
      # addons:
      #   homebrew:
      #   packages: python3

    # pypy
    - python: pypy
      env: PYPY_VERSION=pypy-4.0.1
    - python: pypy
      env: PYPY_VERSION=pypy-5.1
    - python: pypy3
      env: PYPY_VERSION=pypy3-2.4.0

    # integration tests take too long to be run in every cell of the build matrix
    - python: 2.7
      env: MODE=TEST_RAW_API
    - python: 3.8
      env: MODE=TEST_RAW_API

    # coverage
    - python: 3.8
      env: MODE=coverage

    # deploy
    - python: 3.8
      os: linux
      dist: xenial
      git:
        depth: false
      env:
        - MODE=deploy
    - python: 3.8
      os: osx
      language: bash
      git:
        depth: false
      env:
        - TRAVIS_PYTHON_VERSION=3.8
        - MODE=deploy
      before_cache:
        - rm -f "$HOME/Library/Caches/pip/log/debug.log"
      # Homebrew bundle is deprecated, we use pyenv to install specific python version.
      # https://travis-ci.community/t/macos-build-fails-because-of-homebrew-bundle-unknown-command/7296/15
      # addons:
      #   homebrew:
      #   packages: python3
    - python: 3.8
      os: windows
      language: bash
      git:
        depth: false
      env:
        - TRAVIS_PYTHON_VERSION=3.8
        - MODE=deploy

cache:
  - pip
  - directories:
    - $HOME/.eggs
    - $HOME/.pyenv
before_install:
  - if [[ "$TRAVIS_OS_NAME" != "windows" ]]; then uname -a; fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then lsb_release -a; fi
  - |
        # install Python 3 on non-linux OSes
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
            export PYENV_ROOT="$HOME/.pyenv"
            if [ -f "$PYENV_ROOT/bin/pyenv" ]; then
                pushd "$PYENV_ROOT" && git pull && popd
            else
                rm -rf "$PYENV_ROOT" && git clone --depth 1 https://github.com/pyenv/pyenv.git "$PYENV_ROOT"
            fi
            travis_retry env PYTHON_CONFIGURE_OPTS="--enable-framework" pyenv install --skip-existing 3.8.2
            pyenv global 3.8.2
            travis_retry pip3 install virtualenv
            virtualenv -p python3 .venv
            source ".venv/bin/activate"
        elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
            travis_retry choco install python --version 3.8
            export PATH="/C/Python38:/C/Python38/Scripts:$PATH"
            travis_retry pip3 install virtualenv
            virtualenv -p python3 .venv
            source ".venv/Scripts/activate"
        else
            echo skip
        fi
  - |
        # upgrade pypy (to a version that works with Cryptography 1.0)
        if [ -z "$PYPY_VERSION" ]; then
            echo 'this is a build of native Travis pypy/pypy3, not the upgraded one'
        elif [[ "$TRAVIS_PYTHON_VERSION" == "pypy" ]] || [[ "$TRAVIS_PYTHON_VERSION" == "pypy3" ]]; then
            export PYENV_ROOT="$HOME/.pyenv"
            if [ -f "$PYENV_ROOT/bin/pyenv" ]; then
                pushd "$PYENV_ROOT" && git pull && popd
            else
                rm -rf "$PYENV_ROOT" && git clone --depth 1 https://github.com/yyuu/pyenv.git "$PYENV_ROOT"
            fi
            echo "PYPY_VERSION=$PYPY_VERSION"
            travis_retry "$PYENV_ROOT/bin/pyenv" install --skip-existing "$PYPY_VERSION"
            if [ ! -e "$HOME/.virtualenvs/$PYPY_VERSION/bin/activate" ]; then
                virtualenv -p "$PYENV_ROOT/versions/$PYPY_VERSION/bin/python" "$HOME/.virtualenvs/$PYPY_VERSION"
            fi
            source "$HOME/.virtualenvs/$PYPY_VERSION/bin/activate"
        else
            echo skip upgrade pypy
        fi
  - virtualenv --version
  - python --version
  - |
        # upgrade setuptools if it's too old to support PEP 508
        # PEP 508 support is needed for python version dependent dependencies in requirements.txt/setup.py (e.g. futures)
        pip install "setuptools>=20.2"

install:
  - pip install -r requirements.txt || (pip install git+git://github.com/Backblaze/b2-sdk-python#egg=b2sdk && pip install -r requirements.txt)
  - pip install -r requirements-setup.txt
  - pip install -r requirements-test.txt
  - pip install 'https://github.com/reef-technologies/b2-sdk-python/archive/shipping_split_fixes.zip#egg=b2sdk'
  - |
        # fix a problem with dateutil and pyinstaller on Windows
        # https://github.com/crsmithdev/arrow/issues/353
        if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
            pip uninstall -y python-dateutil
            easy_install python-dateutil
        fi
  - |
        # coverage has additional requirements
        if [ "$MODE" == 'coverage' ]; then
            travis_retry pip install "coverage==4.5.4"
            if [ -n "$CODACY_PROJECT_TOKEN" ]; then travis_retry pip install codacy-coverage; fi
            if [ -n "$COVERALLS_REPO_TOKEN" ]; then travis_retry pip install coveralls; fi
            if [ -n "$CODECOV_TOKEN" ]; then travis_retry wget https://codecov.io/bash -O codecov.sh && chmod +x codecov.sh; fi
        fi

before_script:
  - pip freeze

script:
  - |
        # nosetests
        if [ -z "$MODE" ]; then
            python setup.py nosetests
        elif [ "$MODE" == 'coverage' ]; then
            python setup.py nosetests --with-coverage --cover-xml --cover-package "$(python setup.py --name)" --cover-branches
        else
            echo skip
        fi
  - |
        # yapf
        if [ "$MODE" == 'SCA' ]; then
            if [ -n "$TRAVIS_COMMIT_RANGE" ]; then
                echo "using commit range: $TRAVIS_COMMIT_RANGE"
                git diff --name-only "$TRAVIS_COMMIT_RANGE" | grep '\.py$' | xargs yapf --diff setup.py || exit
            else
                yapf --diff --recursive . || exit
            fi
        else
            echo skip
        fi
  - |
        # pyflakes
        if [ "$MODE" == 'SCA' ]; then
            echo "pyflakes temporarily disabled because it does not respect # noqa and we need wildcard imports"
            return 0
            pyflakes . || exit
        else
            echo skip
        fi
  - |
        # run command to check liccheck
        if [ "$MODE" == 'SCA' ]; then
            liccheck -s ci/license_strategy.ini -r requirements.txt
        else
            echo skip
        fi

  # isort doesn't get along with yapf. Hopefully we'll figure it out and re-enable in the future.
  # - if [ "$MODE" == 'SCA' ]; then isort --order-by-type --recursive --line-width 100 --diff --verbose --check-only || exit; else echo skip; fi

  # home-made bad code detectors
  - if [ "$MODE" == 'SCA' ]; then egrep -r '^ *class [^\(]+(\(\))?:' . && exit 1 || true; else echo skip; fi  # old-style class detector
  - if [ "$MODE" == 'SCA' ]; then grep -r 'isinstance\(' . && exit 1 || true; else echo skip; fi  # very non-pythonic
  - if [ "$MODE" == 'SCA' ]; then egrep -r '\b(all|any)\(\[' . && exit 1 || true; else echo skip; fi  # a list is unnecesarily allocated where a generator expression could have been used
  - if [ "$MODE" == 'SCA' ]; then grep -r '\_\_metaclass\_\_' . && exit 1 || true; else echo skip; fi  # bad metaclass declaration: use six
  - if [ "$MODE" == 'SCA' ]; then grep -P -r '^ *logger = (?!logging\.getLogger\(__name__\)$)' . | grep -v '.eggs/nose-' && exit 1 || true; else echo skip; fi  # bad logger definition: use `logger = logging.getLogger(__name__)`. See the magic logging metaclass.
  # FIXME: temporary switch off checking of year in licence headers
  # - |
  #       if [ "$MODE" == 'SCA' ]; then
  #           missing="$(
  #               (
  #                   grep -l "Copyright $(date +%Y).*\\. All Rights Reserved." $(git ls-files | grep .py)
  #                   git ls-files | grep .py
  #               ) | sort | uniq -c | sort -n | awk '$1 == 1 && $2 !~ ".*/__init__.py"'
  #           )"
  #           if [ -n "$missing" ]; then
  #               echo 'license is missing from:' >&2
  #               echo "$missing" >&2
  #               return 1
  #           fi

  #           failing=0
  #           for file in $(git ls-files | grep .py)
  #           do
  #               if [ ! -f "$file" ]; then
  #                   echo "file with a newline in the name or space or something? \"$file\""
  #                   return 1
  #               fi
  #               license_path="$(grep -B3 'All Rights Reserved' "$file" | awk '/# File: / {print $3}')"
  #               if [ "$file" != "$license_path" ]; then
  #                   failing=1
  #                   echo "$file contains an inappropriate path in license header: \"$license_path\""
  #               fi
  #           done
  #           if [ "$failing" == 1 ]; then
  #               echo "license checker FAILED"
  #               return 1
  #           else
  #               echo "license checker passed"
  #           fi
  #       else
  #           echo skip
  #       fi

  # package installation
  - |
        if [ "$MODE" == 'SCA' ]; then
            echo skip
        else
            if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
                # install action fails on osx for unknown reason
                python setup.py develop
            else
                python setup.py install
            fi
        fi

  # integration tests
  - |
        if [ -n "$TEST_APPLICATION_KEY_ID" -a "$MODE" == "TEST_RAW_API" ]; then
            python test_b2_command_line.py "$TEST_APPLICATION_KEY_ID" "$TEST_APPLICATION_KEY"
        else
            echo skip
        fi

  # deploy
  - |
        set -e
        if [ -n "$TEST_APPLICATION_KEY_ID" -a "$MODE" == 'deploy' ]; then
            if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
                B2_DIR=release/$TRAVIS_OS_NAME
                B2_BINARY=b2
            elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
                B2_DIR=release/$TRAVIS_OS_NAME
                B2_BINARY=b2.exe
            else
                B2_DIR=release/$TRAVIS_OS_NAME/$TRAVIS_DIST
                B2_BINARY=b2
            fi
            # create a bundle
            pyinstaller --onefile b2.spec
            # run integration tests
            python test_b2_command_line.py --command=./dist/$B2_BINARY "$TEST_APPLICATION_KEY_ID" "$TEST_APPLICATION_KEY"
            if [ -n "$TRAVIS_TAG" ]; then
                # upload the bundle to the B2 cloud
                B2_VERSION=$(dist/$B2_BINARY version)
                B2_TAG=$(git describe --tags --first-parent --always)
                echo "Uploading \"$B2_VERSION\" created from $B2_TAG to the: $B2_DIR/$B2_BINARY"
                dist/$B2_BINARY authorize-account "$TEST_APPLICATION_KEY_ID" "$TEST_APPLICATION_KEY"
                dist/$B2_BINARY upload-file --noProgress --info="b2_version=$B2_VERSION" --info="b2_tag=$B2_TAG" "$DEPLOY_BUCKET_NAME" dist/$B2_BINARY $B2_DIR/$B2_BINARY
            fi
        else
            echo skip
        fi

after_success:
  - if [ "$MODE" == 'coverage' -a -n "$CODACY_PROJECT_TOKEN" ]; then travis_retry python-codacy-coverage -r coverage.xml; else echo skip; fi
  - if [ "$MODE" == 'coverage' -a -n "$COVERALLS_REPO_TOKEN" ]; then travis_retry coveralls; else echo skip; fi
  - if [ "$MODE" == 'coverage' -a -n "$CODECOV_TOKEN" ]; then travis_retry ./codecov.sh -X gcov -X coveragepy; else echo skip; fi
