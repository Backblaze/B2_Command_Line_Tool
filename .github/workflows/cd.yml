name: Continuous Delivery

on:
  push:
    tags: 'v*'  # push events to matching v*, i.e. v1.0, v20.15.10

env:
  CD: "true"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PYTHON_DEFAULT_VERSION: "3.12"

jobs:
  deploy:
    env:
      B2_PYPI_PASSWORD: ${{ secrets.B2_PYPI_PASSWORD }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.outputs.version }}
    steps:
      - name: Determine if pre-release
        id: prerelease_check
        run: |
          if [[ ${{ github.ref }} =~ [^0-9]$ ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      - name: Install dependencies
        run: python -m pip install --upgrade nox pdm
      - name: Build the distribution
        id: build
        run: nox -vs build
      - name: Read the Changelog
        id: read-changelog
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.build.outputs.version }}
      - name: Create GitHub release and upload the distribution
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.build.outputs.version }}
          body: ${{ steps.read-changelog.outputs.changes }}
          draft: false
          prerelease: ${{ steps.prerelease_check.outputs.prerelease }}
          files: ${{ steps.build.outputs.asset_path }}
      - name: Trigger docker image deployment
        if: ${{ env.DOCKERHUB_USERNAME != '' && steps.prerelease_check.outputs.prerelease == 'false' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'push_docker.yml',
              ref: context.ref,
            });
      - name: Upload the distribution to PyPI
        if: ${{ env.B2_PYPI_PASSWORD != '' && steps.prerelease_check.outputs.prerelease == 'false' }}
        uses: pypa/gh-action-pypi-publish@v1.3.1
        with:
          user: __token__
          password: ${{ env.B2_PYPI_PASSWORD }}
  deploy-linux-bundle:
    needs: deploy
    runs-on: ubuntu-latest
    container:
      image: "python:3.12"  # can not use ${{ env.PYTHON_DEFAULT_VERSION }} here
      env:
        DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          apt-get -y update
          apt-get -y install patchelf
          python -m pip install --upgrade nox pdm
          git config --global --add safe.directory '*'
      - name: Bundle the distribution
        id: bundle
        run: nox -vs bundle
      - name: Sign the bundle
        id: sign
        run: nox -vs sign
      - name: Generate hashes
        id: hashes
        run: nox -vs make_dist_digest
      - name: Upload the bundle to the GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.deploy.outputs.version }}
          draft: false
          prerelease: ${{ steps.prerelease_check.outputs.prerelease }}
          files: ${{ steps.sign.outputs.asset_path }}
  deploy-windows-bundle:
    needs: deploy
    env:
      B2_WINDOWS_CODE_SIGNING_CERTIFICATE: ${{ secrets.B2_WINDOWS_CODE_SIGNING_CERTIFICATE }}
      B2_WINDOWS_CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.B2_WINDOWS_CODE_SIGNING_CERTIFICATE_PASSWORD }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_DEFAULT_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
      - name: Install dependencies
        run: python -m pip install --upgrade nox pdm
      - name: Bundle the distribution
        id: bundle
        shell: bash
        run: nox -vs bundle
      - name: Import certificate
        id: windows_import_cert
        if: ${{ env.B2_WINDOWS_CODE_SIGNING_CERTIFICATE != '' }}
        uses: timheuer/base64-to-file@v1
        with:
          fileName: 'cert.pfx'
          encodedString: ${{ secrets.B2_WINDOWS_CODE_SIGNING_CERTIFICATE }}
      - name: Sign the bundle
        if: ${{ env.B2_WINDOWS_CODE_SIGNING_CERTIFICATE != '' }}
        id: sign
        shell: bash
        run: nox -vs sign -- '${{ steps.windows_import_cert.outputs.filePath }}' '${{ env.B2_WINDOWS_CODE_SIGNING_CERTIFICATE_PASSWORD }}'
      - name: Generate hashes
        id: hashes
        run: nox -vs make_dist_digest
      - name: Create GitHub release and upload the distribution
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.deploy.outputs.version }}
          draft: false
          prerelease: ${{ steps.prerelease_check.outputs.prerelease }}
          files:
            ${{ steps.sign.outputs.asset_path || steps.bundle.outputs.asset_path }}
